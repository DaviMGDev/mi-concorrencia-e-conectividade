package api

import (
	"client-of-dispair/internal/api/protocol"
	"encoding/json"
	"net"
	"sync"
)

type Client struct {
	Address    string
	Connection net.Conn
	Mutex      sync.Mutex
	Encoder    *json.Encoder
	Decoder    *json.Decoder
}

func NewClient(address string) *Client {
	return &Client{
		Address: address,
	}
}

func (c *Client) Connect() error {
	conn, err := net.Dial("tcp", c.Address)
	if err != nil {
		return err
	}
	c.Connection = conn
	c.Encoder = json.NewEncoder(conn)
	c.Decoder = json.NewDecoder(conn)
	return nil
}

func (c *Client) Close() error {
	if c.Connection != nil {
		return c.Connection.Close()
	}
	return nil
}

func (c *Client) SendRequest(req *protocol.Request) error {
	c.Mutex.Lock()
	defer c.Mutex.Unlock()
	return c.Encoder.Encode(req)
}

func (c *Client) ReceiveResponse() (*protocol.Response, error) {
	var resp protocol.Response
	err := c.Decoder.Decode(&resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}
